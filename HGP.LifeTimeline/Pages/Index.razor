@page "/"

<PageTitle>Life Timeline</PageTitle>

<label>Date of Birth:</label>
<input @bind="BirthProxy" type="date"/>

<br/>

<label>Preferred Age of Death:</label>
<input @bind="DesiredDeathAge" type="number" minlength="2" min="65"/>

<hr/>

<label>Rate the following on a scale of 1-10</label>

<hr/>

<label>Your diet:</label>
<input @bind="DietRating" type="number" minlength="1" min="0" max="10"/>

<br/>

<label>How often you exercise:</label>
<input @bind="ExerciseRating" type="number" minlength="1" min="0" max="10"/>

<br/>

<label>Your amount of exposure to cigarretes or other secondhand-smoke:</label>
<input @bind="CigaretteRating" type="number" minlength="1" min="0" max="10"/>

<br/>

<label>How often you have "clumsy moments":</label>
<input @bind="AccidentRating" type="number" minlength="1" min="0" max="10"/>

<br/>

<label>How often you deal with stress:</label>
<input @bind="StressRating" type="number" minlength="1" min="0" max="10"/>

<hr/>

<button @onclick="Calculate">Calculate</button>

<hr/>

@if (IsCalculated)
{
    
    
    <span>Key</span><br/>
    <div class="key">
        <div style="height: 20px; width: 20px; background-color: green"></div><br/>
        <span>General Life</span>
    </div><br/>
    <div class="key">
        <div style="height: 20px; width: 20px; background-color: red"></div><br/>
        <span>Birth</span>
    </div><br/>
    <div class="key">
        <div style="height: 20px; width: 20px; background-color: orange"></div><br/>
        <span>Current Age</span>
    </div><br/>
    <div class="key">
        <div style="height: 20px; width: 20px; background-color: yellow"></div><br/>
        <span>Desired Age of Death</span>
    </div><br/>
    <div class="key">
        <div style="height: 20px; width: 20px; background-color: grey"></div><br/>
        <span>Actual Age of Death</span>
    </div><br/>
    
    <hr/>
    
    foreach (var item in LifeStages)
    {
        <div class="item">
            <div style="height: @(item.Height)px; width: 50vw; background-color: @item.Color; border: solid black 1px"></div>
            <br/>
        </div>
    }

}

@code {
    private List<Stage> LifeStages { get; set; }
    private bool IsCalculated { get; set; }
    private int ActualDeathAge { get; set; }

    private DateTime BirthProxy { get; set; } = new(1, 1, 1);
    private DateOnly BirthDate { get; set; }
    private int Age => Years(BirthDate, DateOnly.FromDateTime(DateTime.Now));
    private int DesiredDeathAge { get; set; } = 65;
    
    private int DietRating { get; set; }
    private int ExerciseRating { get; set; }
    private int CigaretteRating { get; set; }
    private int AccidentRating { get; set; }
    private int StressRating { get; set; }

    private void Calculate()
    {
        BirthDate = DateOnly.FromDateTime(BirthProxy);
        
        if (Age <= 0)
            return;
    
        LifeStages = new List<Stage>();
        IsCalculated = true;
        
        var age = 85;

        age += SwitchOnInt(DietRating);
        age += SwitchOnInt(ExerciseRating);
        age += -SwitchOnInt(CigaretteRating);
        age += -SwitchOnInt(AccidentRating);
        age += -SwitchOnInt(StressRating);

        ActualDeathAge = (int)(age + 6.5d * Random.Shared.NextDouble());
        
        LifeStages.Add(new Stage("red", $"Birth ({BirthDate})", 20));
        LifeStages.Add(new Stage("green", "", Age * 8));
        LifeStages.Add(new Stage("orange", $"Current Age ({Age})", 20));
        LifeStages.Add(new Stage("green", "", (DesiredDeathAge - Age) * 8));

        if (DesiredDeathAge <= ActualDeathAge)
        {
            LifeStages.Add(new Stage("yellow", $"Desired Age of Death ({DesiredDeathAge})", 20));
            LifeStages.Add(new Stage("green", "", (ActualDeathAge - DesiredDeathAge) * 8));
            LifeStages.Add(new Stage("grey", $"Actual Age of Death ({ActualDeathAge})", 20));
        }
        else
        {
            LifeStages.Add(new Stage("grey", $"Actual Age of Death ({ActualDeathAge})", 20));
            LifeStages.Add(new Stage("green", "", (DesiredDeathAge - ActualDeathAge) * 8));
            LifeStages.Add(new Stage("yellow", $"Desired Age of Death ({DesiredDeathAge})", 20));
        }
    }

    private int SwitchOnInt(int i)
    {
        switch (DietRating)
        {
            case <= 3:
            {
                return -5;
            }
            case <= 6:
            {
                return -3;
            }
            case <= 9:
            {
                return -1;
            }
            default:
            {
                return +3;
            }
        }
    }

    private string TrimmedDoubleString(double d)
    {
        return d.ToString();
    }
    
    private int Years(DateOnly start, DateOnly end)
    {
        return (end.Year - start.Year - 1) +
               (((end.Month > start.Month) ||
                 ((end.Month == start.Month) && (end.Day >= start.Day))) ? 1 : 0);
    }

    private record Stage(string Color, string Text, int Height);
}